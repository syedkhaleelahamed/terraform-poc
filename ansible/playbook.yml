---
- name: Install Java, Jenkins, and Terraform on Ubuntu EC2
  hosts: your_target_hosts # <<-- IMPORTANT: Replace with your inventory group name or IP
  become: yes # Run all tasks with sudo privileges

  vars:
    java_version: "openjdk-21-jre"
    jenkins_gpg_key_url: "https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key"
    jenkins_repo_url: "https://pkg.jenkins.io/debian-stable binary/"
    terraform_version: "1.6.5"
    terraform_arch: "linux_amd64" # <<-- IMPORTANT: Changed from 'linux_386' to 'linux_amd64' as 386 is rarely used for EC2.
                                  # If your EC2 instance is truly 32-bit (highly unlikely for new EC2), change back to linux_386.

  tasks:
    # --- System Update and Java Installation ---
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600 # Keep cache valid for 1 hour

    - name: Install fontconfig and Java ({{ java_version }})
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - fontconfig
        - "{{ java_version }}"

    - name: Verify Java version
      ansible.builtin.command: java -version
      register: java_version_output
      changed_when: false
      args:
        warn: false
    - name: Display Java version
      ansible.builtin.debug:
        var: java_version_output.stderr # java -version often outputs to stderr

    # --- Jenkins Installation ---
    - name: Pause for 30 seconds before installing Jenkins (as per script)
      ansible.builtin.pause:
        seconds: 30
      when: false # Recommended to keep this commented out or set to false in real automation
                  # unless there's a specific, proven dependency that needs time.
                  # Ansible's handlers and task dependencies are usually better.

    - name: Ensure /usr/share/keyrings directory exists
      ansible.builtin.file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'

    - name: Download Jenkins GPG key
      ansible.builtin.get_url:
        url: "{{ jenkins_gpg_key_url }}"
        dest: /usr/share/keyrings/jenkins-keyring.asc
        mode: '0644'
        force: yes # Overwrite if it exists, ensures current key

    - name: Add Jenkins apt repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] {{ jenkins_repo_url }}"
        state: present
        filename: jenkins
        update_cache: yes # Run apt update after adding the repo

    - name: Install Jenkins
      ansible.builtin.apt:
        name: jenkins
        state: present
      notify:
        - Start and Enable Jenkins

    # --- Terraform Installation ---
    - name: Pause for 30 seconds before installing Terraform (as per script)
      ansible.builtin.pause:
        seconds: 30
      when: false # Recommended to keep this commented out or set to false in real automation

    - name: Install unzip
      ansible.builtin.apt:
        name: unzip
        state: present

    - name: Download Terraform
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        dest: "/tmp/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        mode: '0644'

    - name: Unzip Terraform to /usr/local/bin
      ansible.builtin.unarchive:
        src: "/tmp/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        dest: "/usr/local/bin/"
        remote_src: yes # Source is on the remote machine
        creates: /usr/local/bin/terraform # Idempotency check: don't unzip if terraform already exists

    - name: Verify Terraform installation
      ansible.builtin.command: terraform version
      register: terraform_version_output
      changed_when: false
      args:
        warn: false
    - name: Display Terraform version
      ansible.builtin.debug:
        var: terraform_version_output.stdout_lines

  handlers:
    - name: Start and Enable Jenkins
      ansible.builtin.systemd:
        name: jenkins
        state: started
        enabled: yes
