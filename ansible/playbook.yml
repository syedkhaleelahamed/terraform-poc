---
- name: Install Java, Jenkins, and Terraform on Ubuntu EC2
  hosts: all # <<-- IMPORTANT: Replace with your inventory group name or IP
  become: yes # Run all tasks with sudo privileges
  # Add this to ensure Ansible uses python3 on the remote host
  vars:
    ansible_python_interpreter: /usr/bin/python3
    java_version: "openjdk-21-jre"
    jenkins_gpg_key_url: "https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key"
    jenkins_repo_url: "https://pkg.jenkins.io/debian-stable binary/"
    terraform_version: "1.6.5"
    terraform_arch: "linux_amd64"

  tasks:
    # --- Critical: Ensure Python environment is healthy ---
    - name: Ensure Python development headers and pip are installed via apt
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: yes # Ensure apt cache is updated before installing python packages
      loop:
        - python3-pip
        - python3-dev
        - build-essential # Often needed for compiling Python packages

    - name: Upgrade pip itself using pip3 (essential for clean upgrades)
      ansible.builtin.command: python3 -m pip install --upgrade pip
      changed_when: false # This command itself doesn't change system state but upgrades pip

    - name: Upgrade core Python HTTP/SSL libraries (urllib3, requests, pyOpenSSL)
      ansible.builtin.pip:
        name: "{{ item }}"
        state: latest
        executable: pip3 # Explicitly use pip3
      loop:
        - urllib3
        - requests
        - pyopenssl
        - cryptography # Often a dependency of pyOpenSSL, can cause issues if outdated

    - name: Check urllib3, requests, and pyOpenSSL versions (for debugging)
      ansible.builtin.command: python3 -c "import urllib3; import requests; import OpenSSL; print(f'urllib3: {urllib3.__version__}'); print(f'requests: {requests.__version__}'); print(f'pyOpenSSL: {OpenSSL.__version__}')"
      register: python_libs_versions_check
      changed_when: false
    - name: Display Python library versions
      ansible.builtin.debug:
        var: python_libs_versions_check.stdout_lines

    # --- System Update and Java Installation ---
    - name: Update apt cache (initial)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install fontconfig and Java ({{ java_version }})
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - fontconfig
        - "{{ java_version }}"

    - name: Verify Java version
      ansible.builtin.command:
        _raw_params: java -version
      register: java_version_output
      changed_when: false
    - name: Display Java version
      ansible.builtin.debug:
        var: java_version_output.stderr

    # --- Jenkins Installation ---
    - name: Ensure /usr/share/keyrings directory exists
      ansible.builtin.file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'

    - name: Download Jenkins GPG key
      ansible.builtin.get_url:
        url: "{{ jenkins_gpg_key_url }}"
        dest: /usr/share/keyrings/jenkins-keyring.asc
        mode: '0644'
        force: yes

    - name: Add Jenkins apt repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] {{ jenkins_repo_url }}"
        state: present
        filename: jenkins
        update_cache: yes

    - name: Install Jenkins
      ansible.builtin.apt:
        name: jenkins
        state: present
      notify:
        - Start and Enable Jenkins

    # --- Terraform Installation ---
    - name: Install unzip
      ansible.builtin.apt:
        name: unzip
        state: present

    - name: Download Terraform
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        dest: "/tmp/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        mode: '0644'

    - name: Unzip Terraform to /usr/local/bin
      ansible.builtin.unarchive:
        src: "/tmp/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        dest: "/usr/local/bin/"
        remote_src: yes
        creates: /usr/local/bin/terraform

    - name: Verify Terraform installation
      ansible.builtin.command:
        _raw_params: terraform version
      register: terraform_version_output
      changed_when: false
    - name: Display Terraform version
      ansible.builtin.debug:
        var: terraform_version_output.stdout_lines

  handlers:
    - name: Start and Enable Jenkins
      ansible.builtin.systemd:
        name: jenkins
        state: started
        enabled: yes
