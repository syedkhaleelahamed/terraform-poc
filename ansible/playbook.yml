---
- name: Setup Java, Jenkins, and Terraform on Ubuntu
  hosts: all # <--- IMPORTANT: Change this to your inventory group or host name
  become: yes              # Run all tasks with sudo privileges

  vars:
    # Set the desired versions and URLs here for easy updates
    java_package: "openjdk-21-jre"
    jenkins_gpg_key_url: "https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key"
    jenkins_repo_url: "https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
                       /etc/apt/sources.list.d/jenkins.list > /dev/null"
    terraform_version: "1.6.5"
    # IMPORTANT: 'linux_386' is for 32-bit systems, which are rare for EC2.
    # Most EC2 instances are 64-bit. Change to 'linux_amd64' if applicable.
    terraform_arch: "linux_386" # Change to "linux_amd64" for 64-bit EC2 instances

  tasks:
    - name: Update apt cache and install common prerequisites
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600 # Keep cache valid for 1 hour
        name:
          - wget
          - apt-transport-https
          - gnupg2
          - fontconfig
          - python3-requests
          - "{{ java_package }}" # Install Java here as well

    - name: Upgrade python3-requests to latest version
      ansible.builtin.apt:
        name: python3-requests
        state: latest

    # The original script had a 30-second sleep after Java install.
    # In Ansible, explicit waits like 'sleep' are often unnecessary because
    # tasks run sequentially and modules are designed to wait for their
    # dependencies to be ready. I'm keeping it commented out for now.
    # - name: Wait for 30 seconds before proceeding (as per original script)
    #   ansible.builtin.pause:
    #     seconds: 30
    #   when: false # Set to 'true' if you absolutely need this pause

    
    - name: Ensure /etc/apt/keyrings directory exists for Jenkins GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Jenkins GPG key to /tmp
      ansible.builtin.get_url:
        url: "{{ jenkins_gpg_key_url }}"
        dest: /tmp/jenkins-keyring.asc
        mode: '0644'
        force: yes # Overwrite if it exists, ensures current key

    - name: Move Jenkins GPG key to /etc/apt/keyrings
      ansible.builtin.copy:
        src: /tmp/jenkins-keyring.asc
        dest: /etc/apt/keyrings/jenkins-keyring.asc
        remote_src: yes
        mode: '0644'

    - name: Add Jenkins apt repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc] {{ jenkins_repo_url }}"
        state: present
        filename: jenkins
        update_cache: yes # Run apt update after adding the new repo

    - name: Install Jenkins
      ansible.builtin.apt:
        name: jenkins
        state: present
        force: yes # Ensure Jenkins is installed, even if already present
      notify:
        - Start and Enable Jenkins # Trigger handler to start Jenkins after install

    # The original script had a 30-second sleep after Jenkins install.
    # - name: Wait for 30 seconds before proceeding to Terraform (as per original script)
    #   ansible.builtin.pause:
    #     seconds: 30
    #   when: false # Set to 'true' if you absolutely need this pause

    - name: Install unzip (required for Terraform installation)
      ansible.builtin.apt:
        name: unzip
        state: present

    - name: Download Terraform archive
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        dest: "/tmp/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        mode: '0644'

    - name: Unzip Terraform and move to /usr/local/bin
      ansible.builtin.unarchive:
        src: "/tmp/terraform_{{ terraform_version }}_{{ terraform_arch }}.zip"
        dest: "/usr/local/bin/"
        remote_src: yes # Source file is on the remote machine
        creates: /usr/local/bin/terraform # Idempotency check: don't unzip if terraform already exists

    - name: Verify Terraform installation
      ansible.builtin.command:
        _raw_params: terraform version
      register: terraform_version_output
      changed_when: false
    - name: Display Terraform version
      ansible.builtin.debug:
        var: terraform_version_output.stdout_lines

  handlers:
    - name: Start and Enable Jenkins
      ansible.builtin.systemd:
        name: jenkins
        state: started
        enabled: yes
